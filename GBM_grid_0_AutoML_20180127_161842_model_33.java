/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-01-27T20:04:04.643-05:00
  3.16.0.4
  
  Standalone prediction code with sample test data for GBMModel named GBM_grid_0_AutoML_20180127_161842_model_33

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.5.153:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.5.153:54321/3/Models.java/GBM_grid_0_AutoML_20180127_161842_model_33 > GBM_grid_0_AutoML_20180127_161842_model_33.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m GBM_grid_0_AutoML_20180127_161842_model_33.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="GBM_grid_0_AutoML_20180127_161842_model_33", algorithm="gbm")
public class GBM_grid_0_AutoML_20180127_161842_model_33 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 300; }
  public int nclasses() { return 1; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_GBM_grid_0_AutoML_20180127_161842_model_33.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* vector0 */ null,
    /* vector1 */ null,
    /* vector2 */ null,
    /* vector3 */ null,
    /* vector4 */ null,
    /* vector5 */ null,
    /* vector6 */ null,
    /* vector7 */ null,
    /* vector8 */ null,
    /* vector9 */ null,
    /* vector10 */ null,
    /* vector11 */ null,
    /* vector12 */ null,
    /* vector13 */ null,
    /* vector14 */ null,
    /* vector15 */ null,
    /* vector16 */ null,
    /* vector17 */ null,
    /* vector18 */ null,
    /* vector19 */ null,
    /* vector20 */ null,
    /* vector21 */ null,
    /* vector22 */ null,
    /* vector23 */ null,
    /* vector24 */ null,
    /* vector25 */ null,
    /* vector26 */ null,
    /* vector27 */ null,
    /* vector28 */ null,
    /* vector29 */ null,
    /* vector30 */ null,
    /* vector31 */ null,
    /* vector32 */ null,
    /* vector33 */ null,
    /* vector34 */ null,
    /* vector35 */ null,
    /* vector36 */ null,
    /* vector37 */ null,
    /* vector38 */ null,
    /* vector39 */ null,
    /* vector40 */ null,
    /* vector41 */ null,
    /* vector42 */ null,
    /* vector43 */ null,
    /* vector44 */ null,
    /* vector45 */ null,
    /* vector46 */ null,
    /* vector47 */ null,
    /* vector48 */ null,
    /* vector49 */ null,
    /* vector50 */ null,
    /* vector51 */ null,
    /* vector52 */ null,
    /* vector53 */ null,
    /* vector54 */ null,
    /* vector55 */ null,
    /* vector56 */ null,
    /* vector57 */ null,
    /* vector58 */ null,
    /* vector59 */ null,
    /* vector60 */ null,
    /* vector61 */ null,
    /* vector62 */ null,
    /* vector63 */ null,
    /* vector64 */ null,
    /* vector65 */ null,
    /* vector66 */ null,
    /* vector67 */ null,
    /* vector68 */ null,
    /* vector69 */ null,
    /* vector70 */ null,
    /* vector71 */ null,
    /* vector72 */ null,
    /* vector73 */ null,
    /* vector74 */ null,
    /* vector75 */ null,
    /* vector76 */ null,
    /* vector77 */ null,
    /* vector78 */ null,
    /* vector79 */ null,
    /* vector80 */ null,
    /* vector81 */ null,
    /* vector82 */ null,
    /* vector83 */ null,
    /* vector84 */ null,
    /* vector85 */ null,
    /* vector86 */ null,
    /* vector87 */ null,
    /* vector88 */ null,
    /* vector89 */ null,
    /* vector90 */ null,
    /* vector91 */ null,
    /* vector92 */ null,
    /* vector93 */ null,
    /* vector94 */ null,
    /* vector95 */ null,
    /* vector96 */ null,
    /* vector97 */ null,
    /* vector98 */ null,
    /* vector99 */ null,
    /* vector100 */ null,
    /* vector101 */ null,
    /* vector102 */ null,
    /* vector103 */ null,
    /* vector104 */ null,
    /* vector105 */ null,
    /* vector106 */ null,
    /* vector107 */ null,
    /* vector108 */ null,
    /* vector109 */ null,
    /* vector110 */ null,
    /* vector111 */ null,
    /* vector112 */ null,
    /* vector113 */ null,
    /* vector114 */ null,
    /* vector115 */ null,
    /* vector116 */ null,
    /* vector117 */ null,
    /* vector118 */ null,
    /* vector119 */ null,
    /* vector120 */ null,
    /* vector121 */ null,
    /* vector122 */ null,
    /* vector123 */ null,
    /* vector124 */ null,
    /* vector125 */ null,
    /* vector126 */ null,
    /* vector127 */ null,
    /* vector128 */ null,
    /* vector129 */ null,
    /* vector130 */ null,
    /* vector131 */ null,
    /* vector132 */ null,
    /* vector133 */ null,
    /* vector134 */ null,
    /* vector135 */ null,
    /* vector136 */ null,
    /* vector137 */ null,
    /* vector138 */ null,
    /* vector139 */ null,
    /* vector140 */ null,
    /* vector141 */ null,
    /* vector142 */ null,
    /* vector143 */ null,
    /* vector144 */ null,
    /* vector145 */ null,
    /* vector146 */ null,
    /* vector147 */ null,
    /* vector148 */ null,
    /* vector149 */ null,
    /* vector150 */ null,
    /* vector151 */ null,
    /* vector152 */ null,
    /* vector153 */ null,
    /* vector154 */ null,
    /* vector155 */ null,
    /* vector156 */ null,
    /* vector157 */ null,
    /* vector158 */ null,
    /* vector159 */ null,
    /* vector160 */ null,
    /* vector161 */ null,
    /* vector162 */ null,
    /* vector163 */ null,
    /* vector164 */ null,
    /* vector165 */ null,
    /* vector166 */ null,
    /* vector167 */ null,
    /* vector168 */ null,
    /* vector169 */ null,
    /* vector170 */ null,
    /* vector171 */ null,
    /* vector172 */ null,
    /* vector173 */ null,
    /* vector174 */ null,
    /* vector175 */ null,
    /* vector176 */ null,
    /* vector177 */ null,
    /* vector178 */ null,
    /* vector179 */ null,
    /* vector180 */ null,
    /* vector181 */ null,
    /* vector182 */ null,
    /* vector183 */ null,
    /* vector184 */ null,
    /* vector185 */ null,
    /* vector186 */ null,
    /* vector187 */ null,
    /* vector188 */ null,
    /* vector189 */ null,
    /* vector190 */ null,
    /* vector191 */ null,
    /* vector192 */ null,
    /* vector193 */ null,
    /* vector194 */ null,
    /* vector195 */ null,
    /* vector196 */ null,
    /* vector197 */ null,
    /* vector198 */ null,
    /* vector199 */ null,
    /* vector200 */ null,
    /* vector201 */ null,
    /* vector202 */ null,
    /* vector203 */ null,
    /* vector204 */ null,
    /* vector205 */ null,
    /* vector206 */ null,
    /* vector207 */ null,
    /* vector208 */ null,
    /* vector209 */ null,
    /* vector210 */ null,
    /* vector211 */ null,
    /* vector212 */ null,
    /* vector213 */ null,
    /* vector214 */ null,
    /* vector215 */ null,
    /* vector216 */ null,
    /* vector217 */ null,
    /* vector218 */ null,
    /* vector219 */ null,
    /* vector220 */ null,
    /* vector221 */ null,
    /* vector222 */ null,
    /* vector223 */ null,
    /* vector224 */ null,
    /* vector225 */ null,
    /* vector226 */ null,
    /* vector227 */ null,
    /* vector228 */ null,
    /* vector229 */ null,
    /* vector230 */ null,
    /* vector231 */ null,
    /* vector232 */ null,
    /* vector233 */ null,
    /* vector234 */ null,
    /* vector235 */ null,
    /* vector236 */ null,
    /* vector237 */ null,
    /* vector238 */ null,
    /* vector239 */ null,
    /* vector240 */ null,
    /* vector241 */ null,
    /* vector242 */ null,
    /* vector243 */ null,
    /* vector244 */ null,
    /* vector245 */ null,
    /* vector246 */ null,
    /* vector247 */ null,
    /* vector248 */ null,
    /* vector249 */ null,
    /* vector250 */ null,
    /* vector251 */ null,
    /* vector252 */ null,
    /* vector253 */ null,
    /* vector254 */ null,
    /* vector255 */ null,
    /* vector256 */ null,
    /* vector257 */ null,
    /* vector258 */ null,
    /* vector259 */ null,
    /* vector260 */ null,
    /* vector261 */ null,
    /* vector262 */ null,
    /* vector263 */ null,
    /* vector264 */ null,
    /* vector265 */ null,
    /* vector266 */ null,
    /* vector267 */ null,
    /* vector268 */ null,
    /* vector269 */ null,
    /* vector270 */ null,
    /* vector271 */ null,
    /* vector272 */ null,
    /* vector273 */ null,
    /* vector274 */ null,
    /* vector275 */ null,
    /* vector276 */ null,
    /* vector277 */ null,
    /* vector278 */ null,
    /* vector279 */ null,
    /* vector280 */ null,
    /* vector281 */ null,
    /* vector282 */ null,
    /* vector283 */ null,
    /* vector284 */ null,
    /* vector285 */ null,
    /* vector286 */ null,
    /* vector287 */ null,
    /* vector288 */ null,
    /* vector289 */ null,
    /* vector290 */ null,
    /* vector291 */ null,
    /* vector292 */ null,
    /* vector293 */ null,
    /* vector294 */ null,
    /* vector295 */ null,
    /* vector296 */ null,
    /* vector297 */ null,
    /* vector298 */ null,
    /* vector299 */ null,
    /* thousand_pct_threshold */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {1.0};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {1.0};

  public GBM_grid_0_AutoML_20180127_161842_model_33() { super(NAMES,DOMAINS,"thousand_pct_threshold"); }
  public String getUUID() { return Long.toString(2865051568362635085L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_0.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_1.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_2.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_3.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_4.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_5.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_6.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_7.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_8.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_9.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_10.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_11.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_12.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_13.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_14.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_15.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_16.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_17.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_18.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_19.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_20.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_21.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_22.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_23.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_24.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_25.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_26.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_27.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_28.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_29.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_30.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_31.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_32.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_33.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_34.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_35.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_36.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_37.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_38.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_39.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_40.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_41.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_42.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_43.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_44.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_45.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_46.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_47.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_48.score0(data,preds);
    GBM_grid_0_AutoML_20180127_161842_model_33_Forest_49.score0(data,preds);
    preds[0] += 0.19444444444444445;
    preds[0] = preds[0];
    return preds;
  }
}
// The class representing training column names
class NamesHolder_GBM_grid_0_AutoML_20180127_161842_model_33 implements java.io.Serializable {
  public static final String[] VALUES = new String[300];
  static {
    NamesHolder_GBM_grid_0_AutoML_20180127_161842_model_33_0.fill(VALUES);
  }
  static final class NamesHolder_GBM_grid_0_AutoML_20180127_161842_model_33_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "vector0";
      sa[1] = "vector1";
      sa[2] = "vector2";
      sa[3] = "vector3";
      sa[4] = "vector4";
      sa[5] = "vector5";
      sa[6] = "vector6";
      sa[7] = "vector7";
      sa[8] = "vector8";
      sa[9] = "vector9";
      sa[10] = "vector10";
      sa[11] = "vector11";
      sa[12] = "vector12";
      sa[13] = "vector13";
      sa[14] = "vector14";
      sa[15] = "vector15";
      sa[16] = "vector16";
      sa[17] = "vector17";
      sa[18] = "vector18";
      sa[19] = "vector19";
      sa[20] = "vector20";
      sa[21] = "vector21";
      sa[22] = "vector22";
      sa[23] = "vector23";
      sa[24] = "vector24";
      sa[25] = "vector25";
      sa[26] = "vector26";
      sa[27] = "vector27";
      sa[28] = "vector28";
      sa[29] = "vector29";
      sa[30] = "vector30";
      sa[31] = "vector31";
      sa[32] = "vector32";
      sa[33] = "vector33";
      sa[34] = "vector34";
      sa[35] = "vector35";
      sa[36] = "vector36";
      sa[37] = "vector37";
      sa[38] = "vector38";
      sa[39] = "vector39";
      sa[40] = "vector40";
      sa[41] = "vector41";
      sa[42] = "vector42";
      sa[43] = "vector43";
      sa[44] = "vector44";
      sa[45] = "vector45";
      sa[46] = "vector46";
      sa[47] = "vector47";
      sa[48] = "vector48";
      sa[49] = "vector49";
      sa[50] = "vector50";
      sa[51] = "vector51";
      sa[52] = "vector52";
      sa[53] = "vector53";
      sa[54] = "vector54";
      sa[55] = "vector55";
      sa[56] = "vector56";
      sa[57] = "vector57";
      sa[58] = "vector58";
      sa[59] = "vector59";
      sa[60] = "vector60";
      sa[61] = "vector61";
      sa[62] = "vector62";
      sa[63] = "vector63";
      sa[64] = "vector64";
      sa[65] = "vector65";
      sa[66] = "vector66";
      sa[67] = "vector67";
      sa[68] = "vector68";
      sa[69] = "vector69";
      sa[70] = "vector70";
      sa[71] = "vector71";
      sa[72] = "vector72";
      sa[73] = "vector73";
      sa[74] = "vector74";
      sa[75] = "vector75";
      sa[76] = "vector76";
      sa[77] = "vector77";
      sa[78] = "vector78";
      sa[79] = "vector79";
      sa[80] = "vector80";
      sa[81] = "vector81";
      sa[82] = "vector82";
      sa[83] = "vector83";
      sa[84] = "vector84";
      sa[85] = "vector85";
      sa[86] = "vector86";
      sa[87] = "vector87";
      sa[88] = "vector88";
      sa[89] = "vector89";
      sa[90] = "vector90";
      sa[91] = "vector91";
      sa[92] = "vector92";
      sa[93] = "vector93";
      sa[94] = "vector94";
      sa[95] = "vector95";
      sa[96] = "vector96";
      sa[97] = "vector97";
      sa[98] = "vector98";
      sa[99] = "vector99";
      sa[100] = "vector100";
      sa[101] = "vector101";
      sa[102] = "vector102";
      sa[103] = "vector103";
      sa[104] = "vector104";
      sa[105] = "vector105";
      sa[106] = "vector106";
      sa[107] = "vector107";
      sa[108] = "vector108";
      sa[109] = "vector109";
      sa[110] = "vector110";
      sa[111] = "vector111";
      sa[112] = "vector112";
      sa[113] = "vector113";
      sa[114] = "vector114";
      sa[115] = "vector115";
      sa[116] = "vector116";
      sa[117] = "vector117";
      sa[118] = "vector118";
      sa[119] = "vector119";
      sa[120] = "vector120";
      sa[121] = "vector121";
      sa[122] = "vector122";
      sa[123] = "vector123";
      sa[124] = "vector124";
      sa[125] = "vector125";
      sa[126] = "vector126";
      sa[127] = "vector127";
      sa[128] = "vector128";
      sa[129] = "vector129";
      sa[130] = "vector130";
      sa[131] = "vector131";
      sa[132] = "vector132";
      sa[133] = "vector133";
      sa[134] = "vector134";
      sa[135] = "vector135";
      sa[136] = "vector136";
      sa[137] = "vector137";
      sa[138] = "vector138";
      sa[139] = "vector139";
      sa[140] = "vector140";
      sa[141] = "vector141";
      sa[142] = "vector142";
      sa[143] = "vector143";
      sa[144] = "vector144";
      sa[145] = "vector145";
      sa[146] = "vector146";
      sa[147] = "vector147";
      sa[148] = "vector148";
      sa[149] = "vector149";
      sa[150] = "vector150";
      sa[151] = "vector151";
      sa[152] = "vector152";
      sa[153] = "vector153";
      sa[154] = "vector154";
      sa[155] = "vector155";
      sa[156] = "vector156";
      sa[157] = "vector157";
      sa[158] = "vector158";
      sa[159] = "vector159";
      sa[160] = "vector160";
      sa[161] = "vector161";
      sa[162] = "vector162";
      sa[163] = "vector163";
      sa[164] = "vector164";
      sa[165] = "vector165";
      sa[166] = "vector166";
      sa[167] = "vector167";
      sa[168] = "vector168";
      sa[169] = "vector169";
      sa[170] = "vector170";
      sa[171] = "vector171";
      sa[172] = "vector172";
      sa[173] = "vector173";
      sa[174] = "vector174";
      sa[175] = "vector175";
      sa[176] = "vector176";
      sa[177] = "vector177";
      sa[178] = "vector178";
      sa[179] = "vector179";
      sa[180] = "vector180";
      sa[181] = "vector181";
      sa[182] = "vector182";
      sa[183] = "vector183";
      sa[184] = "vector184";
      sa[185] = "vector185";
      sa[186] = "vector186";
      sa[187] = "vector187";
      sa[188] = "vector188";
      sa[189] = "vector189";
      sa[190] = "vector190";
      sa[191] = "vector191";
      sa[192] = "vector192";
      sa[193] = "vector193";
      sa[194] = "vector194";
      sa[195] = "vector195";
      sa[196] = "vector196";
      sa[197] = "vector197";
      sa[198] = "vector198";
      sa[199] = "vector199";
      sa[200] = "vector200";
      sa[201] = "vector201";
      sa[202] = "vector202";
      sa[203] = "vector203";
      sa[204] = "vector204";
      sa[205] = "vector205";
      sa[206] = "vector206";
      sa[207] = "vector207";
      sa[208] = "vector208";
      sa[209] = "vector209";
      sa[210] = "vector210";
      sa[211] = "vector211";
      sa[212] = "vector212";
      sa[213] = "vector213";
      sa[214] = "vector214";
      sa[215] = "vector215";
      sa[216] = "vector216";
      sa[217] = "vector217";
      sa[218] = "vector218";
      sa[219] = "vector219";
      sa[220] = "vector220";
      sa[221] = "vector221";
      sa[222] = "vector222";
      sa[223] = "vector223";
      sa[224] = "vector224";
      sa[225] = "vector225";
      sa[226] = "vector226";
      sa[227] = "vector227";
      sa[228] = "vector228";
      sa[229] = "vector229";
      sa[230] = "vector230";
      sa[231] = "vector231";
      sa[232] = "vector232";
      sa[233] = "vector233";
      sa[234] = "vector234";
      sa[235] = "vector235";
      sa[236] = "vector236";
      sa[237] = "vector237";
      sa[238] = "vector238";
      sa[239] = "vector239";
      sa[240] = "vector240";
      sa[241] = "vector241";
      sa[242] = "vector242";
      sa[243] = "vector243";
      sa[244] = "vector244";
      sa[245] = "vector245";
      sa[246] = "vector246";
      sa[247] = "vector247";
      sa[248] = "vector248";
      sa[249] = "vector249";
      sa[250] = "vector250";
      sa[251] = "vector251";
      sa[252] = "vector252";
      sa[253] = "vector253";
      sa[254] = "vector254";
      sa[255] = "vector255";
      sa[256] = "vector256";
      sa[257] = "vector257";
      sa[258] = "vector258";
      sa[259] = "vector259";
      sa[260] = "vector260";
      sa[261] = "vector261";
      sa[262] = "vector262";
      sa[263] = "vector263";
      sa[264] = "vector264";
      sa[265] = "vector265";
      sa[266] = "vector266";
      sa[267] = "vector267";
      sa[268] = "vector268";
      sa[269] = "vector269";
      sa[270] = "vector270";
      sa[271] = "vector271";
      sa[272] = "vector272";
      sa[273] = "vector273";
      sa[274] = "vector274";
      sa[275] = "vector275";
      sa[276] = "vector276";
      sa[277] = "vector277";
      sa[278] = "vector278";
      sa[279] = "vector279";
      sa[280] = "vector280";
      sa[281] = "vector281";
      sa[282] = "vector282";
      sa[283] = "vector283";
      sa[284] = "vector284";
      sa[285] = "vector285";
      sa[286] = "vector286";
      sa[287] = "vector287";
      sa[288] = "vector288";
      sa[289] = "vector289";
      sa[290] = "vector290";
      sa[291] = "vector291";
      sa[292] = "vector292";
      sa[293] = "vector293";
      sa[294] = "vector294";
      sa[295] = "vector295";
      sa[296] = "vector296";
      sa[297] = "vector297";
      sa[298] = "vector298";
      sa[299] = "vector299";
    }
  }
}

class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_0_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[192]) || data[192 /* vector192 */] <0.99153733f ? 
        -0.015555556f : 
        0.024444446f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_1_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.86559755f ? 
        0.02368889f : 
        -0.015591111f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_2_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.86559755f ? 
        0.026104888f : 
        -0.014023822f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_3_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.86559755f ? 
        0.027465384f : 
        -0.012795249f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_4_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.86559755f ? 
        0.021819267f : 
        -0.012149065f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_5_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* vector56 */] <-1.5254811f ? 
        0.015217224f : 
        -0.013650641f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_6_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* vector56 */] <-1.5254811f ? 
        0.020290744f : 
        -0.013662435f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_7_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[251 /* vector251 */] <1.3631202f ? 
        0.021477759f : 
        -0.010001006f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_8_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.86559755f ? 
        0.020322608f : 
        -0.01075627f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_9_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[192]) || data[192 /* vector192 */] <0.99153733f ? 
        -0.01144553f : 
        0.021626156f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_10_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[251 /* vector251 */] <1.3631202f ? 
        0.017660324f : 
        -0.014439462f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_11_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.86559755f ? 
        0.020488452f : 
        -0.009349178f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_12_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* vector56 */] <-1.5254811f ? 
        0.011857393f : 
        -0.011139228f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_13_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.86559755f ? 
        0.019226467f : 
        -0.008433105f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_14_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* vector56 */] <-1.5254811f ? 
        0.010125571f : 
        -0.009780647f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_15_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[204 /* vector204 */] <-0.21230869f ? 
        0.017989691f : 
        -0.0044035083f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_16_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[270]) || data[270 /* vector270 */] <0.52026325f ? 
        -0.008813163f : 
        0.0112847425f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_17_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[270]) || data[270 /* vector270 */] <0.52026325f ? 
        -0.0032017466f : 
        0.022745332f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_18_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[63 /* vector63 */] <-0.79318756f ? 
        -0.012814625f : 
        -0.01007761f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_19_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[204 /* vector204 */] <-0.21230869f ? 
        0.021471055f : 
        -0.010802885f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_20_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[251 /* vector251 */] <1.3631202f ? 
        0.02172412f : 
        -0.009536788f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_21_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[192]) || data[192 /* vector192 */] <0.99153733f ? 
        -0.01161235f : 
        0.0034117913f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_22_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* vector56 */] <-1.5254811f ? 
        0.01031286f : 
        -0.008845456f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_23_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[251 /* vector251 */] <1.3631202f ? 
        0.007028827f : 
        -0.008070869f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_24_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[63 /* vector63 */] <-0.79318756f ? 
        0.009906671f : 
        -0.00571771f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_25_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[192]) || data[192 /* vector192 */] <0.99153733f ? 
        -0.0069852346f : 
        0.00847043f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_26_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.81225544f ? 
        0.0081637995f : 
        -0.006853526f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_27_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[192]) || data[192 /* vector192 */] <0.99153733f ? 
        -0.0040889755f : 
        0.008806203f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_28_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* vector56 */] <-1.5254811f ? 
        0.0044019385f : 
        -0.0050245416f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_29_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[251 /* vector251 */] <1.5655925f ? 
        0.010459067f : 
        -0.0062890644f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_30_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[79 /* vector79 */] <0.55111885f ? 
        0.013683342f : 
        -0.0032250418f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_31_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[204 /* vector204 */] <-0.21230869f ? 
        0.0033579208f : 
        -0.001485823f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_32_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[251 /* vector251 */] <1.3631202f ? 
        0.010166284f : 
        -0.0069606975f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_33_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.81225544f ? 
        0.012825863f : 
        -0.0058524096f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_34_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[79 /* vector79 */] <0.55111885f ? 
        0.008616699f : 
        -0.006321724f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_35_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.81225544f ? 
        -0.0022009255f : 
        -0.0074411714f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_36_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* vector56 */] <-1.5254811f ? 
        0.010547015f : 
        -0.006789023f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_37_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[251 /* vector251 */] <1.5655925f ? 
        0.0049436945f : 
        -0.009218617f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_38_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.81225544f ? 
        0.008862497f : 
        -0.003736912f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_39_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* vector56 */] <-1.5254811f ? 
        0.014417566f : 
        -0.003755213f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_40_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[123]) || data[123 /* vector123 */] <-0.53545547f ? 
        0.0066405153f : 
        -0.007822697f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_41_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[150]) || data[150 /* vector150 */] <5.1020746f ? 
        0.0062222504f : 
        -0.007937821f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_42_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[79 /* vector79 */] <0.55111885f ? 
        0.0073270523f : 
        -0.0016934779f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_43_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[102 /* vector102 */] <-1.5857838f ? 
        -0.0047819344f : 
        0.008312526f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_44_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[233 /* vector233 */] <-0.81225544f ? 
        0.004322123f : 
        -0.0033130574f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_45_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[251 /* vector251 */] <1.5655925f ? 
        0.005112264f : 
        -0.0022018426f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_46_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[123]) || data[123 /* vector123 */] <-0.53545547f ? 
        0.008161824f : 
        -0.0063315365f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_47_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[79 /* vector79 */] <0.55111885f ? 
        0.011013122f : 
        -0.004023411f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_48_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[56 /* vector56 */] <-1.5254811f ? 
        0.005664507f : 
        -0.0021945145f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class GBM_grid_0_AutoML_20180127_161842_model_33_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_grid_0_AutoML_20180127_161842_model_33_Tree_49_class_0.score0(fdata);
  }
}
class GBM_grid_0_AutoML_20180127_161842_model_33_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[267]) || data[267 /* vector267 */] <0.73052347f ? 
        0.0032478427f : 
        -0.006823833f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


